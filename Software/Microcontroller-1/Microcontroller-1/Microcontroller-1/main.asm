	.equ E = 0
	.equ RW = 1
	.equ RS = 2
	.equ Clear_Display = 0b00000001
	ldi r16, HIGH(RAMEND)
	out SPH, r16
	ldi r16, LOW(RAMEND)
	out SPL, r16

LCD_SETUP:	
	ldi r16, 0xFF
	out DDRD, r16 // DB0-DB7
	ldi r16, 0x07 // E, R/W, RS
	out DDRA , r16
	//WAIT FOR 30 ms AFTER 4.5 V HAS BEEN SUPPLIED TO SCREEN
	ldi r20, 0b00111000 // 2_line_5x8_mode
	call LCD_INSTRUCTION_WRITE

	ldi r20, 0b00001110 // DISPLAY ON, CURSOR ON, BLINK OFF
	call LCD_INSTRUCTION_WRITE

	ldi r20, Clear_Display 
	call LCD_INSTRUCTION_WRITE

	//WAIT FOR MORE THAN 1.53 ms

	ldi r20, 0b00000111 // INCREMENT MODE, ENTIRE SHIFT ON
	call LCD_INSTRUCTION_WRITE 
	// INIT DONE

DO_NOTHING:
	jmp DO_NOTHING

LCD_INSTRUCTION_WRITE:
	ldi r16, (0<<E)|(0<<RW)|(0<<RS)
	out PORTA, r16
	call LCD_WRITE
	ret

LCD_DATA_WRITE:
	ldi r16, (0<<E)|(0<<RW)|(1<<RS)
	out PORTA, r16
	call LCD_WRITE
	ret

LCD_WRITE: //RS = 1 IS DATA, RS = 0 IS INSTRUCTION

	//WAIT ATLEAST 40 ns
	ori r16, (1<<E)
	out PORTA, r16 //E PULSE STARTS
	 
	out PORTD, r20 // DATA TO BE WRITTEN IS IN R20, MIGHT CHANGE TO STACK ARGUMENT?
	//WAIT FOR E PULSE WIDTH ATLEAST 230 ns
	andi r16, 0xFE //E PULSE STOPS
	out PORTA, r16
	//WAIT FOR ATLEAST 10 ns
	ldi r16, 0x00
	out PORTD, r16 // REMOVE DATA FROM DB0-DB7
	ldi r16, (1<<RW)
	out PORTA, r16 // PUT INTO READMODE
	ret
