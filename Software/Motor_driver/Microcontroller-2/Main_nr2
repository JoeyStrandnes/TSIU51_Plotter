
 ;motor processor



	.cseg
	.org	0
	jmp		START
	.org	INT0addr
	jmp		ISR_UPPER_TRIGGER
	.org	INT1addr
	jmp		ISR_LOWER_TRIGGER
	.org	TWIaddr
	jmp		ISR_TWI
	.org	0x1C
	jmp		ADC_ISR
	.org	0x26	//Timer0 comp
	jmp		ISR_TIMER0_COMP


	.dseg
	.org	SRAM_START
POSU:
	.byte	1	;Upper slab possission
POSL:
	.byte	1	;Lower slab possission
COLOR_POS:
	.byte	1	;current color possission
	.cseg


	.def	TIMER0_REG  = r23
	.def	TOGGLE_REG	= r24

	.equ	SERVO_RR	= 2600		;Refresh rate
	.equ	SERVO_CW	= 10		;Clockwise
	.equ	SERVO_CCW	= 200		;Counter clockwise
	.equ	SERVO_ST	= 193		;Stop
	.equ	NO_SKITTLE	= 5

	;---code
START:
	ldi		r16, HIGH(RAMEND)
	out		SPH, r16
	ldi		r16, LOW(RAMEND)
	out		SPL, r16

    call	HW_INIT

	call	WARM

WAIT_FOR_COLOR:
	rjmp	WAIT_FOR_COLOR

;---------------------------------------


;***Eatch time the the drum passes a color dump***
ISR_UPPER_TRIGGER:
	;push all used
	push	r16
	in		r16, SREG
	push	r16
	;



	//call	DELAY
	
	ldi		r16, HIGH(SERVO_ST)
	out		OCR1BH, r16
	ldi		r16, LOW(SERVO_ST)
	out		OCR1BL, r16

	sbrc	TOGGLE_REG, 2
	rjmp	SKIP_INTERUPT_FIRST_SPIN
	//SEND PULSE THAT SORTING IS COMPLETE
	ldi		r16, 0
	out		PORTB, r16 
	call	DELAY
	ldi		r16, 1
	out		PORTB, r16

SKIP_INTERUPT_FIRST_SPIN:
	;pull all used
	pop		r16
	out		SREG, r16
	pop		r16
	reti
;----------------------------------------




;***Eatch time the the drum passes a color dump***
ISR_LOWER_TRIGGER:
	;push all used
	push	r16
	in		r16, SREG
	push	r16
	push	r17
	;
WARM_DRUM:
	sbrs	TOGGLE_REG, 0
	rjmp	FIRST_SPIN

	clr		r16
	out		TCNT0, r16
	clr		TIMER0_REG

	rjmp	ISR_LOWER_TRIGGER_END

FIRST_SPIN:
	sbrs	TOGGLE_REG, 1
	rjmp	FIRST_SPIN_FIRST_TRIGGER
	cbr		TOGGLE_REG, 0b00000010
	rjmp	ISR_LOWER_TRIGGER_END

FIRST_SPIN_FIRST_TRIGGER:
	sbrs	TOGGLE_REG, 2
	rjmp	NORMAL_PROCEDURE
		
	ldi		r16, HIGH(SERVO_ST)
	out		OCR1AH, r16
	ldi		r16, LOW(SERVO_ST)
	out		OCR1AL, r16

	//SEND PULSE FOR FIRST READ
	ldi		r16, 0
	out		PORTB, r16 
	call	DELAY
	ldi		r16, 1
	out		PORTB, r16

	cbr		TOGGLE_REG, 0b00000100
	rjmp	ISR_LOWER_TRIGGER_END

	

NORMAL_PROCEDURE:
	;check for false interupt
	in		r16, OCR1AL		//servo direction
	cpi		r16, LOW(SERVO_ST)
	breq	ISR_LOWER_TRIGGER_END

	in		r16, OCR1AL		;servo direction
	cpi		r16, SERVO_CCW		
	breq	CCW_DIR
CW_DIR:
	lds		r16, (POSL)
	inc		r16
	rjmp	DIR_LIM
CCW_DIR:
	lds		r16, (POSL)
	dec		r16
	;
DIR_LIM:
	ori		r16, 0	;check negative
	brmi	UND_LIM	;under limit
	cpi		r16, 5	;over limit
	brne	POS_OK
	clr		r16
	rjmp	POS_OK
UND_LIM:
	ldi		r16, 4	;***utanf?r sensor***
	;
POS_OK:
	
	sts		(POSL), r16	//new pos
	lds		r17, (COLOR_POS)
	cp		r16, r17
	brne	NO_DROP
	
DROP:
	//call	DELAY	

	ldi		r16, NO_SKITTLE
	sts		(COLOR_POS), r16

	ldi		r16, HIGH(SERVO_ST)
	out		OCR1AH, r16
	ldi		r16, LOW(SERVO_ST)
	out		OCR1AL, r16
	;WHEN THE LOWER DISK HAS ROTATED TO ITS TARGET, THE UPPER ROTATES AND DROPS OFF SKITTLE
	ldi		r16, HIGH(SERVO_CCW)
	out		OCR1BH, r16
	ldi		r16, LOW(SERVO_CCW)
	out		OCR1BL, r16
NO_DROP:

ISR_LOWER_TRIGGER_END:
	;pull all used
	pop		r17
	pop		r16
	out		SREG, r16
	pop		r16
	reti



DELAY:
; Delay 320 000 cycles
; 40ms at 8.0 MHz
	push r18
	push r19
	push r20

    ldi  r18, 2
    ldi  r19, 160
    ldi  r20, 147
L1: dec  r20
    brne L1
    dec  r19
    brne L1
    dec  r18
    brne L1
    nop

	pop r20
	pop r19
	pop r18
	ret
;----------------------------------------




ISR_TIMER0_COMP:
	;push all used
	push	r16
	in		r16, SREG
	push	r16

	inc		TIMER0_REG
	cpi		TIMER0_REG, 30		//Time between holes
	brne	WRONG_POSITION
	
	ldi		r16, (0<<CS02)|(0<<CS01)|(0<<CS00) //disable timer0
	out		TCCR0, r16
	cbr		TOGGLE_REG, 0b00000001

WRONG_POSITION:
	
	;pull all used
	pop		r16
	out		SREG, r16
	pop		r16
	reti
;----------------------------------------


ADC_ISR:
	in		r16, ADCL
	in		r17, ADCH

	cpi		r16, 0x0F
	brlo	NO_OVER_CURRENT
	 
	//HÄR SKA VI STANNA MOTORN
	jmp		ADC_DONE

NO_OVER_CURRENT:
	

ADC_DONE:

	reti
;----------------------------------------


ISR_TWI:
	push	r16
	in		r16, SREG
	push	r16

	in		r16, TWSR
	cpi		r16, 0x80
	brne	NO_DATA
	in		r16, TWDR
	sts		(COLOR_POS), r16
	cpi		r16, NO_SKITTLE
	breq	NO_DATA //BAD READING

	lds		r17, (POSL)
	cp		r16, r17
	breq	LOWER_NO_MOVEMENT
	brlo	LOWER_ROTATE_CCW
LOWER_ROTATE_CW:
	 
	ldi		r16, HIGH(SERVO_CW)
	out		OCR1AH, r16
	ldi		r16, LOW(SERVO_CW)
	out		OCR1AL, r16
	rjmp		NO_DATA
LOWER_ROTATE_CCW:
	ldi		r16, HIGH(SERVO_CCW)
	out		OCR1AH, r16
	ldi		r16, LOW(SERVO_CCW)
	out		OCR1AL, r16
	rjmp	NO_DATA
LOWER_NO_MOVEMENT:
	ldi		r16, HIGH(SERVO_CCW)
	out		OCR1BH, r16
	ldi		r16, LOW(SERVO_CCW)
	out		OCR1BL, r16

NO_DATA:
	ldi		r16, (1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE)
	out		TWCR, r16

	
	pop		r16
	out		SREG, r16
	pop		r16
	reti
;-----------------------------------------







HW_INIT:

	call	FIRST_INIT
	call	TIMER1_INIT
	call	TIMER0_INIT
	call	TWI_SLAVE_INIT
	//call	ADC_INIT
	ret


FIRST_INIT:
	;interupt for drum trigger
	ldi		r16, (0<<ISC00)|(1<<ISC01)|(1<<ISC11)|(0<<ISC10)
	out		MCUCR, r16
	ldi		r16, (1<<INT0)|(1<<INT1)
	out		GICR, r16

	ldi		r16, 0xF0	
	out		DDRD, r16	;D 4-7 output

	ldi		r16, 0b00000011
	out		DDRB, r16    ;B 0-1 output  0 till MC1, 1 till högtalare
	ldi		r16, 1
	out		PORTB, r16
	ret

TIMER1_INIT:
	; Setting counter mode 
	ldi		r16, (1<<WGM13)|(1<<WGM12)
	out		TCCR1B, r16

	ldi		r16, (1<<WGM11)|(0<<WGM10)|(1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)
	out		TCCR1A, r16

	; Setting max counter value before overflow
	ldi		r16, HIGH(SERVO_RR)
	out		ICR1H, r16
	ldi		r16, LOW(SERVO_RR)
	out		ICR1L, r16

	; Setting prescaling and interrupt
	in		r16, TCCR1B  
	ori		r16,(0<<CS12)|(1<<CS11)|(1<<CS10) //Prescaler set to F_CPU/64 (S:108)

	out		TCCR1B, r16
	ldi		r16, 1<<TOIE1
	out		TIMSK, r16

	ret


;--------------------------------------------	
TIMER0_INIT:	;8bit timer
	ldi		r16, (1<<CS02)|(0<<CS01)|(1<<CS00)|(0<<WGM00)|(1<<WGM01) // Prescaler /1024, CTC mode
	out		TCCR0, r16	
	
	in		r16, TIMSK
	ori		r16, (1<<OCIE0)
	out		TIMSK, r16
	ldi		r16, 100	//time before CTC
	out		OCR0, r16

	ret
;--------------------------------------------
ADC_INIT: 
/*
***ADC SETTINGS***
AREF
Left adjusted
ADC0

ADC always enabled
Auto Trigger enabled
Interrupt enabled
Prescaler: 32 ((8MHz/32)= ADC_FREQ = 250KHz)
Free Running mode (SIFOR defaults to Free Running)
*/
	ldi		r16, (0<<REFS1)|(0<<REFS0)|(0<<ADLAR)|(0<<MUX4)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0)
	out		ADMUX, r16

	ldi		r16, (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(0<<ADPS1)|(1<<ADPS0) 
	out		ADCSRA, r16

	ret
;--------------------------------------------
TWI_SLAVE_INIT:
	ldi		r16, 0b11010010 //0x69 but shifted
	out		TWAR, r16	
	ldi		r16, (1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE)
	out		TWCR, r16
	ret
;--------------------------------------------
//A = LOWER DISK
//B = UPPER DISK

WARM:
	ldi		r16, HIGH(SERVO_ST)
	out		OCR1BH, r16
	ldi		r16, LOW(SERVO_ST)
	out		OCR1BL, r16

	ldi		r16, HIGH(SERVO_ST)
	out		OCR1AH, r16
	ldi		r16, LOW(SERVO_ST)
	out		OCR1AL, r16

	//call	MUSIC
	

	clr		TIMER0_REG
	clr		r16
	clr		r17
	clr		r23
	clr		r24
	clr		r25
	sts		(POSU), r16
	ldi		r16, NO_SKITTLE
	sts		(COLOR_POS), r16
	ldi		r16, 0x01 
	sts		(POSL), r16


	ldi		r16, HIGH(SERVO_CCW)
	out		OCR1BH, r16
	ldi		r16, LOW(SERVO_CCW)
	out		OCR1BL, r16

	ldi		r16, HIGH(SERVO_CW)
	out		OCR1AH, r16
	ldi		r16, LOW(SERVO_CW)
	out		OCR1AL, r16

	sbr		TOGGLE_REG, (1<<0)
	sbr		TOGGLE_REG, (1<<1)
	sbr		TOGGLE_REG, (1<<2)

	sei
	ret

;--------------------------------------------



//MUSIC


	.equ	Ab0 = 255
	.equ	A0	= 246
	.equ	Bb0	= 230
	.equ	B0	= 219
	.equ	C1	= 208
	.equ	Db1 = 196
	.equ	D1	= 185
	.equ	Eb1 = 174
	.equ	E1	= 163
	.equ	F1	= 154
	.equ	Gb1 = 145
	.equ	G1  = 138
	.equ	Ab1 = 130
	.equ	A1	= 123
	.equ	Bb1 = 116
	.equ	B1	= 109
	.equ	C2	= 103
	.equ	Db2 = 96
	.equ	D2  = 91
	.equ	Eb2	= 85
	.equ	E2	= 80
	.equ	F2	= 76
	.equ	Gb2 = 72
	.equ	G2	= 68
	.equ	Ab2 = 63
	.equ	A2	= 60
	.equ	Bb2	= 57
	.equ	B2  = 54
	.equ	C3	= 50
	.equ	Db3	= 47
	.equ	D3	= 45
	.equ	Eb3	= 42
	.equ	E3	= 40

	
	.equ	L_Ab0	= 61
	.equ	L_A0	= 65
	.equ	L_Bb0	= 69
	.equ	L_B0	= 73
	.equ	L_C1	= 76
	.equ	L_Db1	= 81
	.equ	L_D1	= 85
	.equ	L_Eb1	= 92
	.equ	L_E1	= 98
	.equ	L_F1	= 102
	.equ	L_Gb1	= 110
	.equ	L_G1	= 114
	.equ	L_Ab1	= 122
	.equ	L_A1	= 130
	.equ	L_Bb1	= 137
	.equ	L_B1	= 146
	.equ	L_C2	= 153
	.equ	L_Db2	= 163
	.equ	L_D2	= 171
	.equ	L_Eb2	= 183
	.equ	L_E2	= 195
	.equ	L_F2	= 203
	.equ	L_Gb2	= 220
	.equ	L_G2	= 229
	.equ	L_Ab2	= 255
	.equ	L_A2	= 255
	.equ	L_Bb2	= 255
	.equ	L_B2	= 255
	.equ	L_C3	= 255
	.equ	L_Db3	= 255
	.equ	L_D3	= 255
	.equ	L_Eb3	= 255
	.equ	L_E3	= 255
	
		


	.equ	PAUSELENGTH = 5

	.def	NOTE_LENGTH_REG = r25





	
	

MUSIC:
	ldi		r21, (END - NOTES1)*2

	ldi		ZH, HIGH(NOTE_LENGTH*2)
	ldi		ZL, LOW(NOTE_LENGTH*2)
	push	ZH
	push	ZL

	ldi		ZH, HIGH(NOTES1*2)
	ldi		ZL, LOW(NOTES1*2)

	call	SING

	pop		ZL
	pop		ZH

	ret

SING:
	mov		r16, ZH
	mov		r17, ZL
	pop		r18
	pop		r19
	pop		ZL
	pop		ZH
	lpm		NOTE_LENGTH_REG, Z
	lsr		NOTE_LENGTH_REG	//Gör till åttondelar
	adiw	Z, 1
	push	ZH
	push	ZL
	push	r19
	push	r18
	mov		ZH, r16
	mov		ZL, r17

	lpm		r16, Z
	cpi		r16, 0
	breq	PAUSE

	call	WAVE
SONGCONTINUE:
	adiw	Z, 1
	dec		r21
	brne	SING
	ret


WAVE:
	in		r16, PORTB
	ori		r16, 0b00000010
	out		PORTB, r16
	call	WAVEDELAY
	andi	r16, 0b11111101
	out		PORTB, r16
	call	WAVEDELAY

	dec		NOTE_LENGTH_REG
	cpi		NOTE_LENGTH_REG, 0
	breq	WAVE_DONE	
	rjmp	WAVE
WAVE_DONE:
	ret
	
WAVEDELAY:
	push	r16
	push	r17
    ldi		r16, 25
WL0: 
	lpm		r17, Z
WL1: 
	dec		r17
    brne	WL1
    dec		r16
    brne	WL0
	pop		r17
	pop		r16
	ret


PAUSE:

    ldi  r18, PAUSELENGTH
    ldi  r19, 75
    ldi  r20, 191
DL1: dec  r20
    brne DL1
    dec  r19
    brne DL1
    dec  r18
    brne DL1
    nop
	rjmp	SONGCONTINUE


;Zelda
;	.db		L_G1, L_A1, L_B1, L_Db2, L_G1, L_A1, L_B1, L_Db2, L_Ab1, L_Bb1, L_C2, L_D2, L_Ab1, L_Bb1, L_C2, L_D2, L_A1, L_B1, L_Db2, L_Eb2, L_A1, L_B1, L_Db2, L_Eb2, L_Bb1, L_C2, L_D2, L_E2, L_Bb1, L_C2, L_D2, L_E2, L_B1, L_Db2, L_Eb2, L_F2, L_C2, L_D2, L_E2, L_Gb2, L_Db2, L_Eb2, L_F2, L_G2, L_D2, L_E2, L_Gb2, L_Ab2, L_A1, L_A1, L_Bb1, L_Bb1, L_B1, L_B1, L_C2, L_C2, L_C2, L_C2, L_C2, L_C2

;	.db		 G1, A1, B1, Db2, G1, A1, B1, Db2, Ab1, Bb1, C2, D2, Ab1, Bb1, C2, D2, A1, B1, Db2, Eb2, A1, B1, Db2, Eb2, Bb1, C2, D2, E2, Bb1, C2, D2, E2, B1, Db2, Eb2, F2, C2, D2, E2, Gb2, Db2, Eb2, F2, G2, D2, E2, Gb2, Ab2, 0, 0, 0, 0, A1, Bb1, B1, C2, C2, C2, C2

;Carousel:
;	.db		L_C3, 0, L_B2, 0, L_Bb2, L_B2, L_Bb2, L_A2, L_Ab2, 0, L_G2, 0, L_Gb2, L_Gb2, L_G2, L_G2, L_A2, 0, L_Ab2, 0, L_G2, L_Ab2, L_G2, L_Gb2, L_F2, 0, L_E2, 0, L_Eb2, L_Eb2, L_E2, L_E2, L_G2, L_G2, L_F2, L_F2, L_Db2, L_Db2, L_D2, L_D2, L_G2, L_G2, L_F2, L_F2, L_Db2, L_Db2, L_D2, L_D2, L_B1, L_C2, L_Db2, L_D2, L_Eb2, L_E2, L_F2, L_Gb2, L_G2, L_Ab2, L_A2, L_B2, L_A2, L_A2, L_G2, L_G2

;	.db		C3, 0, B2, 0, Bb2, B2, Bb2, A2, Ab2, 0, G2, 0, Gb2, Gb2, G2, G2, A2, 0, Ab2, 0, G2, Ab2, G2, Gb2, F2, 0, E2, 0, Eb2, Eb2, E2, E2, G2, G2, F2, F2, Db2, Db2, D2, D2, G2, G2, F2, F2, Db2, Db2, D2, D2, B1, C2, Db2, D2, Eb2, E2, F2, Gb2, G2, Ab2, A2, B2, A2, A2, G2, G2

;Fast:
;	.db		L_C2, L_D2, L_Eb2, L_Eb2, L_Eb2, 0, L_Eb2, 0, L_Eb2, 0, L_D2, 0, L_C2, 0, L_Bb1, 0, L_Bb1, L_Bb1, 0, L_C2, 0, L_C2, L_C2, 0, L_G2, 0, L_F2, 0, L_E2, 0, L_D2, 0, L_E2, L_E2, 0, L_E2, 0, L_E2, 0, L_F2, 0, L_E2, 0, L_F2, 0, L_F2, L_F2, 0, L_G2, 0, L_G2, L_G2, 0, 0, 0, 0, L_C2, L_D2, L_Eb2, L_Eb2, L_Eb2, 0, L_Eb2, 0, L_Eb2, 0, L_D2, 0, L_C2, 0, L_Bb1, 0, L_Bb1, L_Bb1, 0, L_C2, 0, L_C2, L_C2, 0, L_G2, 0, L_F2, 0, L_E2, 0, L_D2, 0, L_E2, L_E2, 0, L_E2, 0, L_E2, 0, L_F2, 0, L_E2, 0, L_F2, 0, L_F2, L_F2, 0, L_G2, 0, L_G2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, L_G2, L_G2, L_G2, L_G2

;	.db		C2, D2, Eb2, Eb2, Eb2, 0, Eb2, 0, Eb2, 0, D2, 0, C2, 0, Bb1, 0, Bb1, Bb1, 0, C2, 0, C2, C2, 0, G2, 0, F2, 0, E2, 0, D2, 0, E2, E2, 0, E2, 0, E2, 0, F2, 0, E2, 0, F2, 0, F2, F2, 0, G2, 0, G2, G2, 0, 0, 0, 0, C2, D2, Eb2, Eb2, Eb2, 0, Eb2, 0, Eb2, 0, D2, 0, C2, 0, Bb1, 0, Bb1, Bb1, 0, C2, 0, C2, C2, 0, G2, 0, F2, 0, E2, 0, D2, 0, E2, E2, 0, E2, 0, E2, 0, F2, 0, E2, 0, F2, 0, F2, F2, 0, G2, 0, G2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, G2, G2, G2, G2



NOTE_LENGTH:
;	.db		L_G1, L_A1, L_B1, L_Db2, L_G1, L_A1, L_B1, L_Db2, L_Ab1, L_Bb1, L_C2, L_D2, L_Ab1, L_Bb1, L_C2, L_D2, L_A1, L_B1, L_Db2, L_Eb2, L_A1, L_B1, L_Db2, L_Eb2, L_Bb1, L_C2, L_D2, L_E2, L_Bb1, L_C2, L_D2, L_E2, L_B1, L_Db2, L_Eb2, L_F2, L_C2, L_D2, L_E2, L_Gb2, L_Db2, L_Eb2, L_F2, L_G2, L_D2, L_E2, L_Gb2, L_Ab2, L_A1, L_A1, L_Bb1, L_Bb1, L_B1, L_B1, L_C2, L_C2, L_C2, L_C2, L_C2, L_C2
	.db		L_C3, 0, L_B2, 0, L_Bb2, L_B2, L_Bb2, L_A2, L_Ab2, 0, L_G2, 0, L_Gb2, L_Gb2, L_G2, L_G2, L_A2, 0, L_Ab2, 0, L_G2, L_Ab2, L_G2, L_Gb2, L_F2, 0, L_E2, 0, L_Eb2, L_Eb2, L_E2, L_E2, L_G2, L_G2, L_F2, L_F2, L_Db2, L_Db2, L_D2, L_D2, L_G2, L_G2, L_F2, L_F2, L_Db2, L_Db2, L_D2, L_D2, L_B1, L_C2, L_Db2, L_D2, L_Eb2, L_E2, L_F2, L_Gb2, L_G2, L_Ab2, L_A2, L_B2, L_A2, L_A2, L_G2, L_G2
;	.db		L_C2, L_D2, L_Eb2, L_Eb2, L_Eb2, 0, L_Eb2, 0, L_Eb2, 0, L_D2, 0, L_C2, 0, L_Bb1, 0, L_Bb1, L_Bb1, 0, L_C2, 0, L_C2, L_C2, 0, L_G2, 0, L_F2, 0, L_E2, 0, L_D2, 0, L_E2, L_E2, 0, L_E2, 0, L_E2, 0, L_F2, 0, L_E2, 0, L_F2, 0, L_F2, L_F2, 0, L_G2, 0, L_G2, L_G2, 0, 0, 0, 0, L_C2, L_D2, L_Eb2, L_Eb2, L_Eb2, 0, L_Eb2, 0, L_Eb2, 0, L_D2, 0, L_C2, 0, L_Bb1, 0, L_Bb1, L_Bb1, 0, L_C2, 0, L_C2, L_C2, 0, L_G2, 0, L_F2, 0, L_E2, 0, L_D2, 0, L_E2, L_E2, 0, L_E2, 0, L_E2, 0, L_F2, 0, L_E2, 0, L_F2, 0, L_F2, L_F2, 0, L_G2, 0, L_G2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, L_G2, L_G2, L_G2, L_G2

NOTES1:
;	.db		 G1, A1, B1, Db2, G1, A1, B1, Db2, Ab1, Bb1, C2, D2, Ab1, Bb1, C2, D2, A1, B1, Db2, Eb2, A1, B1, Db2, Eb2, Bb1, C2, D2, E2, Bb1, C2, D2, E2, B1, Db2, Eb2, F2, C2, D2, E2, Gb2, Db2, Eb2, F2, G2, D2, E2, Gb2, Ab2, 0, 0, 0, 0, A1, Bb1, B1, C2, C2, C2, C2
	.db		C3, 0, B2, 0, Bb2, B2, Bb2, A2, Ab2, 0, G2, 0, Gb2, Gb2, G2, G2, A2, 0, Ab2, 0, G2, Ab2, G2, Gb2, F2, 0, E2, 0, Eb2, Eb2, E2, E2, G2, G2, F2, F2, Db2, Db2, D2, D2, G2, G2, F2, F2, Db2, Db2, D2, D2, B1, C2, Db2, D2, Eb2, E2, F2, Gb2, G2, Ab2, A2, B2, A2, A2, G2, G2
;	.db		C2, D2, Eb2, Eb2, Eb2, 0, Eb2, 0, Eb2, 0, D2, 0, C2, 0, Bb1, 0, Bb1, Bb1, 0, C2, 0, C2, C2, 0, G2, 0, F2, 0, E2, 0, D2, 0, E2, E2, 0, E2, 0, E2, 0, F2, 0, E2, 0, F2, 0, F2, F2, 0, G2, 0, G2, G2, 0, 0, 0, 0, C2, D2, Eb2, Eb2, Eb2, 0, Eb2, 0, Eb2, 0, D2, 0, C2, 0, Bb1, 0, Bb1, Bb1, 0, C2, 0, C2, C2, 0, G2, 0, F2, 0, E2, 0, D2, 0, E2, E2, 0, E2, 0, E2, 0, F2, 0, E2, 0, F2, 0, F2, F2, 0, G2, 0, G2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, G2, G2, G2, G2

END:
